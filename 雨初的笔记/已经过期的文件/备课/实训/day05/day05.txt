Python中的异常:
1.什么是异常
异常是一个事件，该事件会在程序执行过程中发生，会影响程序的正常运行
一般情况下，Python无法正常处理程序时，就会发生一个异常
异常也是一个Python对象，表示一个错误
当python发生异常时我们需要捕获它，否则程序会终止执行

我们必须预料到会有一些异常，提前准备处理它
--------
2.异常的处理
捕获异常可以使用try/except语句
把可能有异常的语句放在try中,except就可以去捕获可能发生的异常
如果你不想在发生异常时结束，那就需要捕获它

一般我们会使用except Error捕获一些希望提前预见的异常，可以采取指定的方法去处理它，
但是还是会有一些未知的错误，所以最后会捕获不定类型的异常
--------
try-except语句还有一个可选的else语句
如果使用else语句必须放在所有的except的语句之后
当没有异常发生时，else中的语句会被执行
使用else语句比把所有语句都放在try中更好，这样可以避免一些意想不到的二except未捕获的异常
--------
except注意点:
a.不写异常代表捕获一些普通类型的异常
b.可以一次捕获多个异常(except exception1,exception2)
c.多个except不要求从小到大捕获
d.可以在except后添加else语句，当没有异常执行else
e.exception1代表当前的异常实例，使用print可以输出这个实例
f.如果想输出详细的堆栈信息，可以使用一个类
--------
finally:不管try-except是否出错，都会打印finally里的内容
1.如果try中代码没有正确执行，则里面的print不会执行
2.finally一定会执行
-------------------
异常的练习：
让用户输入两个数，相除，如果除数等于0，捕获异常，输出'除数不能为0'，反之输出'没有错误'，
最后执行finally语句，输出'我是finally语句'
-------------------
抛出异常：
抛出的解释：如果错误没有被捕获，它就会向上一直抛出
最后被python解释器捕获，打印一个错误，然后程序退出
Python使用raise语句抛出一个指定的异常
raise唯一的参数就是指定抛出的异常，它必须是一个异常的实例或者是异常的类(Exception)
----------
自定义异常：
我们可以自己去创建一个新的Exception类来解决特定的问题
这个异常应该继承自Exception类


